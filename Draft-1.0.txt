



Web Authorization Protocol                                     J. Hanson
Internet-Draft                                                      Okta
Intended status: Standards Track                         2 December 2022
Expires: 5 June 2023


                  OAuth 2.0 Multi-Factor Authorization

Abstract

   This specification provides a framework for the use of strong
   authorization with OAuth 2.0.  Mechanisms are specified for
   initiating an authorization session.  New authorization grant types
   are defined that allow clients to obtain access tokens within the
   context of a strongly authorized session.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 5 June 2023.

Copyright Notice

   Copyright (c) 2022 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.





Hanson                     Expires 5 June 2023                  [Page 1]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Notational Conventions  . . . . . . . . . . . . . . . . .   4
     1.2.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   4
     1.3.  Protocol Flow . . . . . . . . . . . . . . . . . . . . . .   4
     1.4.  Authorization Grants  . . . . . . . . . . . . . . . . . .   6
       1.4.1.  One-Time Password Credentials . . . . . . . . . . . .   6
       1.4.2.  Out-of-Band Authorization . . . . . . . . . . . . . .   7
       1.4.3.  Recovery Code . . . . . . . . . . . . . . . . . . . .   7
   2.  Protocol Endpoints  . . . . . . . . . . . . . . . . . . . . .   7
     2.1.  Token Endpoint  . . . . . . . . . . . . . . . . . . . . .   8
       2.1.1.  Authorization Challenge Error Response  . . . . . . .   8
     2.2.  Authorization Challenge Endpoint  . . . . . . . . . . . .   9
       2.2.1.  Authorization Challenge Request . . . . . . . . . . .   9
       2.2.2.  Authorization Challenge Response  . . . . . . . . . .  10
   3.  Obtaining Authorization . . . . . . . . . . . . . . . . . . .  12
     3.1.  OTP Credentials Grant . . . . . . . . . . . . . . . . . .  12
       3.1.1.  Authorization Challenge . . . . . . . . . . . . . . .  12
       3.1.2.  User Interaction  . . . . . . . . . . . . . . . . . .  12
       3.1.3.  Access Token Request  . . . . . . . . . . . . . . . .  13
       3.1.4.  Access Token Response . . . . . . . . . . . . . . . .  13
     3.2.  Out-of-Band Verification Code Grant . . . . . . . . . . .  14
       3.2.1.  Authorization Challenge . . . . . . . . . . . . . . .  14
       3.2.2.  User Interaction  . . . . . . . . . . . . . . . . . .  15
       3.2.3.  Access Token Request  . . . . . . . . . . . . . . . .  15
       3.2.4.  Access Token Response . . . . . . . . . . . . . . . .  16
     3.3.  Recovery Code Grant . . . . . . . . . . . . . . . . . . .  16
       3.3.1.  Authorization Challenge . . . . . . . . . . . . . . .  16
       3.3.2.  User Interaction  . . . . . . . . . . . . . . . . . .  17
       3.3.3.  Access Token Request  . . . . . . . . . . . . . . . .  17
       3.3.4.  Access Token Response . . . . . . . . . . . . . . . .  17
   4.  Discovery Metadata  . . . . . . . . . . . . . . . . . . . . .  18
   5.  Normative References  . . . . . . . . . . . . . . . . . . . .  18
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . .  18

1.  Introduction

   Strong authorization is a method of access control that grants access
   only after multiple factors of authentication and/or authorization
   have been presented.  Authentication factors typically fall into the
   following categories: knowledge (something you know), possession
   (something you have), and inherence (something you are).  Strong
   authorization factors include transaction confirmation and multi-
   party authorization.






Hanson                     Expires 5 June 2023                  [Page 2]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   OAuth 2.0 [RFC6749] is an authorization framework that enables a
   third-party application to obtain limited access to a protected HTTP
   resource.  In OAuth, those third-party applications are called
   clients; they access protected resources by presenting an access
   token to the HTTP resource.  Access tokens are issued to clients by
   an authorization server with the (sometimes implicit) approval of the
   resource owner.  These access tokens are typically obtained by
   exchanging an authorization grant, which represents the authorization
   granted by the resource owner (or by a privileged administrator).

   This specification defines a general framework for the use of strong
   authorization within OAuth 2.0.  It provides a mechanism for
   indicating when strong authorization is required.  It also provides a
   generic mechanism for obtaining a strong authorization challenge.  It
   defines additional extension grant types that allow strong
   authorization grants to be presented in order to obtain access
   tokens.

   This use of strong authorization allows authorization servers to
   implement correspondingly strong authorization policies, including
   step-up authentication and transaction confirmation.

   Authorization servers that implement support for resource owner
   password credentials can augment existing password infrastructure by
   requiring a strong second factor of authentication prior to issuing
   access tokens.

   Transaction confirmation can be used to increase the level of
   assurance prior to issuing tokens for highly privileged operations,
   such as a bank withdrawl.  For example, an end-user (resource owner)
   can grant an application (client) access to her account at a
   brokerage firm (resource server).  The application is authorized to
   obtain real-time stock quotes as well as place orders, and is issued
   both an access token and refresh token.  As a matter of policy, the
   access token can be used to obtain stock quotes and is valid for 24
   hours.  Every 24 hour period, the refresh token is used to obtain a
   new access token, so that access to stock quotes is uninterrupted.
   The access token can also be used to place an order, but is subject
   to more stringent security requirements.  Using this extension, the
   refresh token can be used to initiate an authorization session which,
   once confirmed by the user, allows issuance of an access token that
   demonstrates strong authentication and has a limited lifetime.









Hanson                     Expires 5 June 2023                  [Page 3]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

1.2.  Terminology

   This specification also defines the following terms:

   Authorization Challenge
      A challenge issued by an authorization server to a client
      requesting an additional authorization grant that is required in
      order to issue an access token.

   Authorization Session
      A sequence of access token requests to the token endpoint, each
      presenting an authorization grant.  The sequence MAY involve
      requests to additional endpoints, as needed by specific grant
      types.

   MFA Token
      A short lived token representing an authorization session, used to
      keep state during an authorization session.

1.3.  Protocol Flow
























Hanson                     Expires 5 June 2023                  [Page 4]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   +-------------+
   |  Resource   |
   |    Owner    |
   |             |
   +-------------+
     |  ^   |  ^
     |  |   |  |
    (A)(B) (E)(F)
     |  |   |  |
     v  |   v  |
   +-------------+                                     +---------------+
   |             |--(C)--- Authorization Grant ------->|               |
   |             |                                     |               |
   |             |<-(D)- Authorization Challenge ------|               |
   |             |                                     | Authorization |
   |             |--(G)-- Additional Authz Grant ----->|    Server     |
   |             |             & MFA Token             |               |
   |             |                                     |               |
   |   Client    |<-(H)------- Access Token -----------|               |
   |             |                                     +---------------+
   |             |
   |             |                                     +---------------+
   |             |--(I)------- Access Token ---------->|               |
   |             |                                     |   Resource    |
   |             |<-(J)---- Protected Resource --------|    Server     |
   |             |                                     |               |
   +-------------+                                     +---------------+

                      Figure 1: Abstract Protocol Flow

   The abstract OAuth 2.0 multi-factor authorization flow illustrated in
   Figure 1 describes the interaction between the resource owner,
   client, authorization server, and resource server and includes the
   following steps:

   (A)  The client requests authorization from the resource owner.  The
        authorization request can be made directly to the resource owner
        (as shown), or indirectly via the authorization server as an
        intermediary.

   (B)  The client receives an authorization grant, which is a
        credential representing the resource owner's authorization.  The
        authorization grant type depends on the method used by the
        client to request authorization and the types supported by the
        authorization server.

   (C)  The client requests an access token by authenticating with the
        authorization server and presenting the authorization grant.



Hanson                     Expires 5 June 2023                  [Page 5]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   (D)  The authorization server authenticates the client and validates
        the authorization grant, and if an additional authorization
        grant is required, issues an authorization challenge.

   (E)  The client requests additional authorization from the resource
        owner.  The authorization request is made directly to the
        resource owner.

   (F)  The client receives an additional authorization grant.  The
        authorization grant type depends on the method used by the
        client to request authorization and the types supported by the
        authorization server.

   (G)  The client requests an access token by authenticating with the
        authorization server and presenting the additional authorization
        grant along with the MFA token received in the authorization
        challenge.

   (H)  The authorization server authenticates the client and validates
        the authorization grant and MFA token, and if both are valid,
        issues an access token.

   (I)  The client requests the protected resource from the resource
        server and authenticates by presenting the access token.

   (J)  The resource server validates the access token, and if valid,
        serves the request.

1.4.  Authorization Grants

   An authorization grant is a credential representing the resource
   owner's authorization (to access its protected resources) used by the
   client to obtain an access token.  This specification defines three
   grant types -- one-time password credentials, out-of-band, and
   recovery code -- that can be used as additional authorization grants
   within an authorization session.

1.4.1.  One-Time Password Credentials

   The one-time password (OTP) credentials can be used as an
   authorization grant to obtain an access token.  An OTP is generated
   by a hardware device or a software application installed on a device
   such as a mobile phone.  These devices have an embedded secret which
   used as a seed for generating OTPs.  An OTP is single-use and proves
   control of the device.






Hanson                     Expires 5 June 2023                  [Page 6]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   When used in addition to another grant type (such as resource owner
   password credentials), one-time password credentials add an
   additional factor of authentication.

   Even though this grant type requires direct client access to the
   resource owner credentials, the resource owner credentials are used
   for a single request and are exchanged for an access token.
   Furthermore, the single-use nature of an OTP limits the impact of
   exposing a long-term password alone to the client when the resulting
   access token or refresh token are also short-lived.

1.4.2.  Out-of-Band Authorization

   The out-of-band (OOB) authorization grant allows authorization to be
   obtained via a secondary channel.  Once authorized, the grant can be
   used to obtain an access token.  Use of a secondary channel supports
   several use cases.

   The out-of-band authorization grant can be used with an out-of-band
   authenticator to add an additional factor of authentication.  An out-
   of-band authenticator is a physical device that is uniquely
   addressable and can communicate with the authorization server over a
   secondary channel.  Common examples would be a mobile phone using SMS
   as a secondary channel, or a software application installed on a
   device using push notifications as a secondary channel.

   The out-of-band authorization grant can also facilitate more complex
   authorization processes.  For example, out-of-band authorization can
   be used to perform multi-party authorization, in which two or more
   resource owners are needed in order to grant access.

1.4.3.  Recovery Code

   The recovery code is numeric or character string from a set of
   secrets shared between the resource owner and the authorization
   server.  These secrets are typically used by the resource owner in
   the event another authenticator is lost or malfunctions.

2.  Protocol Endpoints

   The multi-factor authorization process utilizes two authorization
   server endpoints (HTTP resources):

   *  Token endpoint - used by the client to exchange an authorization
      grant for an access token, typically with client authentication.
      This endpoint will be called multiple times within an
      authorization session.




Hanson                     Expires 5 June 2023                  [Page 7]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   *  Authorization challenge endpoint - used by the client to obtain an
      authorization challenge, the response to which can be used as an
      authorization grant.

   Not every authorization grant type utilizes both endpoints.
   Extension grant types MAY define additional endpoints as needed.

2.1.  Token Endpoint

   The token endpoint is used by the client to obtain an access token by
   presenting its authorization grant or refresh token, as described in
   Section 3.2 of OAuth 2.0 [RFC6749].

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in Section 5.1 of OAuth 2.0 [RFC6749].  If the
   request failed client authentication or is invalid, the authorization
   server returns an error response as described in Section 5.2 of OAuth
   2.0 [RFC6749].

   If the access token request is valid but not sufficiently authorized,
   the authorization server MAY issue an authorization challenge error
   response as as described in Section 2.1.1.

2.1.1.  Authorization Challenge Error Response

   An authorization challenge error response is a particular type of
   error response as defined in Section 5.2 of OAuth 2.0 [RFC6749] where
   the error code is set to the following value:

   mfa_required
      The authorization grant is insufficiently authorized, but another
      access token request MAY succeed if an additional authorization
      grant is presented.

   In addition to the response parameters defined in Section 5.2 of
   OAuth 2.0 [RFC6749], the following parameters MUST be included in the
   response when the error code is set to "mfa_required":

   mfa_token
      MFA token value associated with the ongoing authorization session.

   For example:








Hanson                     Expires 5 June 2023                  [Page 8]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


     HTTP/1.1 403 Forbidden
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "error":"mfa_required",
       "mfa_token": "eyJhbGciOiJIUzI1NiIsImtpZCI6IjFlOWdkazcifQ.eyJpc3Mi
         OiJodHRwOi8vc2VydmVyLmV4YW1wbGUuY29tIiwic3ViIjoiMjQ4Mjg5NzYxMDA
         xIiwiYXVkIjpbImh0dHA6Ly9zZXJ2ZXIuZXhhbXBsZS5jb20vdG9rZW4iLCJodH
         RwOi8vc2VydmVyLmV4YW1wbGUuY29tL2F1dGhlbnRpY2F0b3JzIl0sIm1mYSI6W
         yJvdHAiLCJvb2IiXSwiZXhwIjoxMzExMjgxOTcwLCJpYXQiOjEzMTEyODA5NzB9
         .IvjKKc54lHvAOCskyEUU8Ou_-8-oXKyFS5bbq-utZPA"
     }

2.2.  Authorization Challenge Endpoint

   The authorization challenge endpoint is used by the client to obtain
   an authorization challenge by presenting an MFA token.  The client
   will typically interact directly with the resource owner to obtain an
   authorization grant, which is used as a response to the authorization
   challenge.

   Use of the authorization challenge endpoint is OPTIONAL; if a client
   knows of a suitable authenticator through an out-of-band mechanism,
   it can obtain a strong authorization grant directly.

2.2.1.  Authorization Challenge Request

   The client makes a request to the authorization challenge endpoint by
   adding the following parameters using the "application/x-www-form-
   urlencoded" format with a character encoding of UTF-8 in the HTTP
   request entity-body:

   mfa_token
      REQUIRED.  The MFA token received from the authorization server in
      the authorization challenge error response.

   challenge_type
      OPTIONAL.  Array of authorization challenge type strings that the
      client supports, expressed as a list of space-delimited, case-
      insensitive strings.

   authenticator_id
      OPTIONAL.  The identifier of the authenticator to challenge.  The
      authorization server MUST ensure that the authenticator is
      associated with the resource owner.




Hanson                     Expires 5 June 2023                  [Page 9]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   client_id
      REQUIRED, if the client is not authenticating with the
      authorization server as described in Section 3.2.1 of OAuth 2.0
      [RFC6749].

   If the client type is confidential or the client was issued client
   credentials (or assigned other authentication requirements), the
   client MUST authenticate with the authorization server as described
   in Section 3.2.1 of OAuth 2.0 [RFC6749].

   For example, the client makes the following HTTP request using
   transport-layer security (with extra line breaks for display purposes
   only):

     POST /challenge HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded

     mfa_token=eyJhbGciOiJ...&challenge_type=otp%20oob

   The authorization server MUST:

   *  require client authentication for confidential clients or for any
      client that was issued client credentials (or with other
      authentication requirements),

   *  authenticate the client if client authentication is included,

   *  ensure that the MFA token was issued to the authenticated
      confidential client, or if the client is public, ensure that the
      token was issued to "client_id" in the request,

   *  verify that the MFA token is valid, and

   *  restore the authorization session based on the state referenced by
      or encoded into the MFA token.

2.2.2.  Authorization Challenge Response

   If the authorization challenge request is valid and authorized, the
   authorization server selects an authorization challenge, the response
   to which would satisfy the authorization session, and constructs the
   response by adding the following parameters to the entity-body of the
   HTTP response using the "application/json" format [RFC8259] with a
   200 (OK) status code:





Hanson                     Expires 5 June 2023                 [Page 10]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   challenge_type
      REQUIRED.  The type of the authorization challenge issued.  Value
      is case insensitive.

   All additional parameters are specified by the authorization
   challenge type.  This document defines the "otp" type in
   Section 3.1.1, the "oob" type in Section 3.2.1, and the "recovery-
   code" type in Section 3.3.1.  Other specifications may define
   additional challenge types.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "challenge_type":"example"
     }

   If the authorization challenge request failed, the authorization
   server responds with an error response as described in Section 5.2 of
   OAuth 2.0 [RFC6749].

   In addition to the error codes defined in Section 5.2 of OAuth 2.0
   [RFC6749], the following error codes are specified for use in
   authorization challenge endpoint responses:

   invalid_authenticator
      The requested authenticator does not exist or is not associated
      with the resource owner.

   expired_token
      The provided MFA token is invalid, expired, revoked, or was issued
      to another client.  The client MAY initiate a new authorization
      session.

   unsupported_challenge_type
      The challenge types supported by the client are not supported by
      the authorization server or not available to the resource owner.

   association_required
      The resource owner is not associated with any authenticator.  The
      authorization session MAY be continued by completing authenticator
      association.





Hanson                     Expires 5 June 2023                 [Page 11]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   server_error
      The authorization server encountered an unexpected condition that
      prevented it from fulfilling the request.

   bad_gateway
      The authorization server received an invalid response from an
      upstream server it accessed in attempting to fulfull the request.
      This typically occurs when challenging an OOB authenticator and
      the gateway is down, for example SMS.

3.  Obtaining Authorization

3.1.  OTP Credentials Grant

   An one-time password is generated by an OTP device, which includes
   hardware devices as well as software-based OTP generators on devices
   such as mobile phones.

3.1.1.  Authorization Challenge

   If the authorization server requires an OTP credential as an
   additional authorization grant, it responds with an OTP authorization
   challenge type containing the following parameters:

   challenge_type
      REQUIRED.  Value MUST be set to "otp".

   No additional parameters are specified for the OTP authorization
   challenge type.

   For example:

     HTTP/1.1 200 OK
     Content-Type: application/json;charset=UTF-8
     Cache-Control: no-store
     Pragma: no-cache

     {
       "challenge_type":"otp"
     }

3.1.2.  User Interaction

   After receiving an OTP challenge, the client prompts or otherwise
   interacts with the resource owner to obtain an OTP generated by a
   device in the possession of the resource owner.





Hanson                     Expires 5 June 2023                 [Page 12]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


3.1.3.  Access Token Request

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format with a character encoding of UTF-8 in the HTTP request entity-
   body:

   grant_type
      REQUIRED.  Value MUST be set to "http://auth0.com/oauth/grant-
      type/mfa-otp".

   otp
      REQUIRED.  The one-time password generated by a device.

   mfa_token
      REQUIRED.  The MFA token, "mfa_token" from the prior authorization
      challenge error response, defined in Section 2.1.1.

   client_id
      REQUIRED, if the client is not authenticating with the
      authorization server as described in Section 3.2.1 of OAuth 2.0
      [RFC6749].

   If the client type is confidential or the client was issued client
   credentials (or assigned other authentication requirements), the
   client MUST authenticate with the authorization server as described
   in Section 3.2.1 of OAuth 2.0 [RFC6749].

   For example, the client makes the following HTTP request using
   transport-layer security (with extra line breaks for display purposes
   only):

     POST /token HTTP/1.1
     Host: server.example.com
     Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
     Content-Type: application/x-www-form-urlencoded

     grant_type=http%3A%2F%2Fauth0.com%2Foauth%2Fgrant-type%2Fmfa-otp
     &otp=123456&mfa_token=eyJhbGciOiJ...

3.1.4.  Access Token Response

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in in Section 5.1 of [RFC6749].  If the request
   failed client authentication or is invalid, the authorization server
   returns an error response as described in Section 5.2 of [RFC6749].




Hanson                     Expires 5 June 2023                 [Page 13]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


3.2.  Out-of-Band Verification Code Grant

   An out-of-band verification code is used to obtain authorization via
   an out-of-band authorization ceremony.  Such ceremonys may include
   confirmation via an out-of-band authenticator or multi-party
   authorization.

   An out-of-band authenticator is a device that can communicate
   securely with the authorization server over a secondary channel, such
   as SMS or push notification.

   Multi-party authorization requires approval from a second authorized
   user, in addition to the resource owner, before an action is allowed
   to take place.

   Out-of-band mechanisms are intentionally open-ended, to allow for
   flexibility in how authorization is obtained.  The details of any
   out-out-band mechanism are beyond the scope of this specification.

3.2.1.  Authorization Challenge

   The authorization server orchestrates an out-of-band authorization
   interaction, and responds with a challenge containing the following
   parameters:

   challenge_type
      REQUIRED.  Value MUST be set to "oob".

   oob_code
      REQUIRED.  The out-of-band transaction code generated by the
      authorization server.  The out-of-band transaction code MUST
      expire shortly after it is issued to mitigate the risk of leaks.
      A maximum out-of-band transaction code lifetime of 10 minutes is
      RECOMMENDED.

   binding_method
      OPTIONAL.  The method used to bind the out-of-band channel with
      the primary channel.  The following methods are defined:

      prompt
            The resource owner should be prompted to enter a code
            received via an out-of-band authenticator.

   expires_in
      OPTIONAL.  The duration in seconds of the out-of-band transaction
      code lifetime.





Hanson                     Expires 5 June 2023                 [Page 14]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   interval
      OPTIONAL.  The minimum amount of time in seconds that the client
      SHOULD wait between polling requests to the token endpoint.

3.2.2.  User Interaction

   After receiving an out-of-band challenge, the client prompts or
   otherwise interacts with the resource owner to inform them of the
   ongoing authorization ceremony.  Any necessary action by the resource
   owner or other party will depend on the specific out-of-band
   mechanism.

   For example, if confirmation is being obtained via an out-of-band
   authenticator, the resource owner will need to perform an
   authorization gesture on the device in her posession.  If multi-party
   authorization is being performed, the resource owner will need to
   wait until the request is granted by a party with sufficient
   authorization rights.

3.2.3.  Access Token Request

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format per Appendix B with a character encoding of UTF-8 in the HTTP
   request entity-body:

   grant_type
      REQUIRED.  Value MUST be set to "http://auth0.com/oauth/grant-
      type/mfa-oob".

   oob_code
      REQUIRED.  The out-of-band verification code.

   binding_code
      REQUIRED, if the binding method of the out-of-band challenge is
      set to prompt.

   mfa_token
      REQUIRED.  The MFA token received when initiating the
      authorization session.

   client_id
      REQUIRED, if the client is not authenticating with the
      authorization server as described in Section 3.2.1 of [RFC6749].

   If the client was issued client credentials (or assigned other
   authentication requirements), the client MUST authenticate with the
   authorization server as described in Section 3.2.1 of [RFC6749].



Hanson                     Expires 5 June 2023                 [Page 15]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


3.2.4.  Access Token Response

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in in Section 5.1 of [RFC6749].  If the request
   failed client authentication or is invalid, the authorization server
   returns an error response as described in Section 5.2 of [RFC6749].

   In addition to the error codes defined in Section 5.2 of [RFC6749],
   the following error codes are specific for the out-of-band
   verification code grant:

   authorization_pending
      The authorization request is still pending as the authorization
      ceremony has not yet completed.  The client should repeat the
      Access Token Request to the token endpoint.

   slow_down
      The client is polling too quickly and should back off at a
      reasonable rate.

   expired_token
      The "oob_code" or "mfa_token" has expired.  The client will need
      to initiate a new authorization session.

   access_denied
      The resource owner or authorization server denied the request.

3.3.  Recovery Code Grant

   Recovery codes are a physical or electronic set of secrets shared
   between the resource owner and the authorization server.  Recovery
   codes are typically used in the event another authenticator device is
   lost or malfunctions.

3.3.1.  Authorization Challenge

   If the authorization server requires a recovery code as an
   authorization grant, it responds with a recovery code authorization
   challenge containing the following parameters:

   challenge_type
      REQUIRED.  Value MUST be set to "recovery-code".

   No additional parameters are specified for the recovery code
   authorization challenge type.





Hanson                     Expires 5 June 2023                 [Page 16]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


3.3.2.  User Interaction

   A user typically signals to the client that they wish to enter a
   recovery flow after realizing that an authenticator device has been
   lost or is malfunctioning.

   Upon receiving this signal from the user, the client prompts or
   otherwise interacts with the resource owner to obtain a recovery
   code.  Such codes are typically already in the resource owner's
   posession, having been previously generated and delivered when
   enrolling an authenticator device.

3.3.3.  Access Token Request

   The client makes a request to the token endpoint by adding the
   following parameters using the "application/x-www-form-urlencoded"
   format per Appendix B with a character encoding of UTF-8 in the HTTP
   request entity-body:

   grant_type
      REQUIRED.  Value MUST be set to "http://auth0.com/oauth/grant-
      type/mfa-recovery-code".

   recovery_code
      REQUIRED.  The recovery code.

   mfa_token
      REQUIRED.  The MFA token received when initiating the
      authorization session.

   client_id
      REQUIRED, if the client is not authenticating with the
      authorization server as described in Section 3.2.1 of [RFC6749].

   If the client was issued client credentials (or assigned other
   authentication requirements), the client MUST authenticate with the
   authorization server as described in Section 3.2.1 of [RFC6749].

3.3.4.  Access Token Response

   If the access token request is valid and authorized, the
   authorization server issues an access token and optional refresh
   token as described in in Section 5.1 of [RFC6749].  If the request
   failed client authentication or is invalid, the authorization server
   returns an error response as described in Section 5.2 of [RFC6749].






Hanson                     Expires 5 June 2023                 [Page 17]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   In addition to the parameters defined in Section 5.1 of [RFC6749],
   the following additional parameters are specific for the recovery
   code grant:

   recovery_code
      OPTIONAL.  A newly issued recovery code, in which case the client
      MUST discard the old recovery code and replace it with the new
      recovery code.

4.  Discovery Metadata

   Support for the strong authorization flow MAY be declared in the
   OAuth 2.0 Authorization Server Metadata [I-D.ietf-oauth-discovery]
   with the following metadata:

   mfa_challenge_endpoint
      OPTIONAL.  URL of the authorization server's MFA challenge
      endpoint defined in Section 2.2.

5.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC6749]  Hardt, D., Ed., "The OAuth 2.0 Authorization Framework",
              RFC 6749, DOI 10.17487/RFC6749, October 2012,
              <https://www.rfc-editor.org/info/rfc6749>.

   [RFC8259]  Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", STD 90, RFC 8259,
              DOI 10.17487/RFC8259, December 2017,
              <https://www.rfc-editor.org/info/rfc8259>.

   [I-D.ietf-oauth-discovery]
              Jones, M., Sakimura, N., and J. Bradley, "OAuth 2.0
              Authorization Server Metadata", Work in Progress,
              Internet-Draft, draft-ietf-oauth-discovery-10, 4 March
              2018, <https://www.ietf.org/archive/id/draft-ietf-oauth-
              discovery-10.txt>.

Author's Address








Hanson                     Expires 5 June 2023                 [Page 18]

Internet-Draft    OAuth 2.0 Multi-Factor Authorization     December 2022


   Jared Hanson
   Okta
   100 First Street
   San Francisco, CA 94105
   United States of America
   Email: jared.hanson@okta.com
   URI:   https://www.jaredhanson.me/












































Hanson                     Expires 5 June 2023                 [Page 19]
